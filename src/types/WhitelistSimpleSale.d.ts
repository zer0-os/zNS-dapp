/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber, BigNumberish, ethers, EventFilter, PopulatedTransaction, Signer } from "ethers";
import { CallOverrides, Contract, ContractTransaction, Overrides, PayableOverrides } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";

interface WhitelistSimpleSaleInterface extends ethers.utils.Interface {
  functions: {
    "__SimpleSale_init(address,uint256,uint256,uint256,address,address)": FunctionFragment;
    "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)": FunctionFragment;
    "addDomainsToSell(string[])": FunctionFragment;
    "controller()": FunctionFragment;
    "currentMaxPurchaseCount()": FunctionFragment;
    "domainsForSale(uint256)": FunctionFragment;
    "domainsPurchasedByAccount(address)": FunctionFragment;
    "domainsSold()": FunctionFragment;
    "maxPurchasesPerAccount()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "parentDomainId()": FunctionFragment;
    "postWhitelistMaxPurchases()": FunctionFragment;
    "purchaseDomains(uint8)": FunctionFragment;
    "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])": FunctionFragment;
    "releaseDomain()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleStartBlock()": FunctionFragment;
    "saleStarted()": FunctionFragment;
    "sellerWallet()": FunctionFragment;
    "setParendDomainId(uint256)": FunctionFragment;
    "setSellerWallet(address)": FunctionFragment;
    "startSale()": FunctionFragment;
    "totalForSale()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "whitelistMerkleRoot()": FunctionFragment;
    "whitelistSaleDuration()": FunctionFragment;
    "zNSRegistrar()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__SimpleSale_init",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "__WhitelistSimpleSale_init",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomainsToSell",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMaxPurchaseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainsForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsPurchasedByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPurchasesPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentDomainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postWhitelistMaxPurchases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomainsWhitelisted",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setParendDomainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSaleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zNSRegistrar",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__SimpleSale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__WhitelistSimpleSale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDomainsToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentMaxPurchaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsPurchasedByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPurchasesPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postWhitelistMaxPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomainsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParendDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zNSRegistrar",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DomainPurchased(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RefundedEther(address,uint256)": EventFragment;
    "SaleStarted()": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class WhitelistSimpleSale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WhitelistSimpleSaleInterface;

  functions: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__SimpleSale_init(address,uint256,uint256,uint256,address,address)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __WhitelistSimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDomainsToSell(string[])"(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    currentMaxPurchaseCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentMaxPurchaseCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { metadataUri: string }>;

    "domainsForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { metadataUri: string }>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "domainsPurchasedByAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "domainsSold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPurchasesPerAccount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    parentDomainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "parentDomainId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    postWhitelistMaxPurchases(overrides?: CallOverrides): Promise<[BigNumber]>;

    "postWhitelistMaxPurchases()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseDomains(uint8)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    purchaseDomainsWhitelisted(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])"(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    releaseDomain(overrides?: Overrides): Promise<ContractTransaction>;

    "releaseDomain()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "salePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "saleStartBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "saleStarted()"(overrides?: CallOverrides): Promise<[boolean]>;

    sellerWallet(overrides?: CallOverrides): Promise<[string]>;

    "sellerWallet()"(overrides?: CallOverrides): Promise<[string]>;

    setParendDomainId(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParendDomainId(uint256)"(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSellerWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startSale(overrides?: Overrides): Promise<ContractTransaction>;

    "startSale()"(overrides?: Overrides): Promise<ContractTransaction>;

    totalForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalForSale()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    "whitelistMerkleRoot()"(overrides?: CallOverrides): Promise<[string]>;

    whitelistSaleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "whitelistSaleDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    zNSRegistrar(overrides?: CallOverrides): Promise<[string]>;

    "zNSRegistrar()"(overrides?: CallOverrides): Promise<[string]>;
  };

  __SimpleSale_init(
    controller_: string,
    parentDomainId_: BigNumberish,
    price: BigNumberish,
    maxPurchasesPerAccount_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__SimpleSale_init(address,uint256,uint256,uint256,address,address)"(
    controller_: string,
    parentDomainId_: BigNumberish,
    price: BigNumberish,
    maxPurchasesPerAccount_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __WhitelistSimpleSale_init(
    controller_: string,
    parentDomainId_: BigNumberish,
    price: BigNumberish,
    maxPurchasesPerAccount_: BigNumberish,
    postWhitelistMaxPurchases_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    whitelistSaleDuration_: BigNumberish,
    merkleRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)"(
    controller_: string,
    parentDomainId_: BigNumberish,
    price: BigNumberish,
    maxPurchasesPerAccount_: BigNumberish,
    postWhitelistMaxPurchases_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    whitelistSaleDuration_: BigNumberish,
    merkleRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addDomainsToSell(
    metadataUris: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDomainsToSell(string[])"(
    metadataUris: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  currentMaxPurchaseCount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentMaxPurchaseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  domainsForSale(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "domainsForSale(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainsPurchasedByAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "domainsPurchasedByAccount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

  "domainsSold()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPurchasesPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

  "parentDomainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  postWhitelistMaxPurchases(overrides?: CallOverrides): Promise<BigNumber>;

  "postWhitelistMaxPurchases()"(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseDomains(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseDomains(uint8)"(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  purchaseDomainsWhitelisted(
    count: BigNumberish,
    index: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])"(
    count: BigNumberish,
    index: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  releaseDomain(overrides?: Overrides): Promise<ContractTransaction>;

  "releaseDomain()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "salePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "saleStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  saleStarted(overrides?: CallOverrides): Promise<boolean>;

  "saleStarted()"(overrides?: CallOverrides): Promise<boolean>;

  sellerWallet(overrides?: CallOverrides): Promise<string>;

  "sellerWallet()"(overrides?: CallOverrides): Promise<string>;

  setParendDomainId(
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParendDomainId(uint256)"(
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSellerWallet(
    wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSellerWallet(address)"(
    wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startSale(overrides?: Overrides): Promise<ContractTransaction>;

  "startSale()"(overrides?: Overrides): Promise<ContractTransaction>;

  totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

  "totalForSale()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  whitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  "whitelistMerkleRoot()"(overrides?: CallOverrides): Promise<string>;

  whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistSaleDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  zNSRegistrar(overrides?: CallOverrides): Promise<string>;

  "zNSRegistrar()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__SimpleSale_init(address,uint256,uint256,uint256,address,address)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __WhitelistSimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addDomainsToSell(string[])"(
      metadataUris: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    currentMaxPurchaseCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentMaxPurchaseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "domainsForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "domainsPurchasedByAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    "domainsSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPurchasesPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    "parentDomainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    postWhitelistMaxPurchases(overrides?: CallOverrides): Promise<BigNumber>;

    "postWhitelistMaxPurchases()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseDomains(uint8)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDomainsWhitelisted(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])"(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    releaseDomain(overrides?: CallOverrides): Promise<void>;

    "releaseDomain()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "salePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "saleStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<boolean>;

    "saleStarted()"(overrides?: CallOverrides): Promise<boolean>;

    sellerWallet(overrides?: CallOverrides): Promise<string>;

    "sellerWallet()"(overrides?: CallOverrides): Promise<string>;

    setParendDomainId(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParendDomainId(uint256)"(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellerWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    "setSellerWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startSale(overrides?: CallOverrides): Promise<void>;

    "startSale()"(overrides?: CallOverrides): Promise<void>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    "totalForSale()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

    "whitelistMerkleRoot()"(overrides?: CallOverrides): Promise<string>;

    whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistSaleDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    zNSRegistrar(overrides?: CallOverrides): Promise<string>;

    "zNSRegistrar()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    DomainPurchased(buyer: null, domainId: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RefundedEther(buyer: null, amount: null): EventFilter;

    SaleStarted(): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__SimpleSale_init(address,uint256,uint256,uint256,address,address)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __WhitelistSimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDomainsToSell(string[])"(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentMaxPurchaseCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentMaxPurchaseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "domainsForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "domainsPurchasedByAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    "domainsSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPurchasesPerAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    "parentDomainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    postWhitelistMaxPurchases(overrides?: CallOverrides): Promise<BigNumber>;

    "postWhitelistMaxPurchases()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchaseDomains(uint8)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    purchaseDomainsWhitelisted(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])"(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    releaseDomain(overrides?: Overrides): Promise<BigNumber>;

    "releaseDomain()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "salePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "saleStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "saleStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "sellerWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    setParendDomainId(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParendDomainId(uint256)"(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSellerWallet(wallet: string, overrides?: Overrides): Promise<BigNumber>;

    "setSellerWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startSale(overrides?: Overrides): Promise<BigNumber>;

    "startSale()"(overrides?: Overrides): Promise<BigNumber>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    "totalForSale()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistMerkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistSaleDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    zNSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;

    "zNSRegistrar()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__SimpleSale_init(address,uint256,uint256,uint256,address,address)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __WhitelistSimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__WhitelistSimpleSale_init(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32)"(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      postWhitelistMaxPurchases_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      whitelistSaleDuration_: BigNumberish,
      merkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDomainsToSell(string[])"(
      metadataUris: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentMaxPurchaseCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentMaxPurchaseCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "domainsForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "domainsPurchasedByAccount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainsSold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPurchasesPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxPurchasesPerAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentDomainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "parentDomainId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postWhitelistMaxPurchases(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "postWhitelistMaxPurchases()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseDomains(uint8)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    purchaseDomainsWhitelisted(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseDomainsWhitelisted(uint8,uint256,bytes32[])"(
      count: BigNumberish,
      index: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    releaseDomain(overrides?: Overrides): Promise<PopulatedTransaction>;

    "releaseDomain()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "salePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleStartBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleStarted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellerWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setParendDomainId(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParendDomainId(uint256)"(
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSellerWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startSale(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startSale()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    totalForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalForSale()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    whitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistMerkleRoot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistSaleDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistSaleDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zNSRegistrar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
