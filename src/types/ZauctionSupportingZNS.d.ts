/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber, BigNumberish, ethers, EventFilter, PopulatedTransaction, Signer } from "ethers";
import { CallOverrides, Contract, ContractTransaction, Overrides } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";

interface ZauctionSupportingZNSInterface extends ethers.utils.Interface {
  functions: {
    "consumed(address,uint256)": FunctionFragment;
    "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "cancelBidsUnderPrice(uint256,uint256)": FunctionFragment;
    "recover(bytes32,bytes)": FunctionFragment;
    "toEthSignedMessageHash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consumed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBidsUnderPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toEthSignedMessageHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBidsUnderPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toEthSignedMessageHash",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(uint256,address,address,uint256,address,uint256,uint256)": EventFragment;
    "Cancelled(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
}

export class ZauctionSupportingZNS extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ZauctionSupportingZNSInterface;

  functions: {
    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "consumed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    acceptBid(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    cancelBidsUnderPrice(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    "cancelBidsUnderPrice(uint256,uint256)"(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  consumed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "consumed(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
   * @param auctionid unique per address auction identifier chosen by seller
   * @param bid token amount bid
   * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
   * @param expireblock block number at which acceptBid stops working
   * @param minbid minimum bid allowed
   * @param nftaddress contract address of the nft we are transferring
   * @param signature type encoded message signed by the bidder
   * @param startblock block number at which acceptBid starts working
   * @param tokenid token id we are transferring
   */
  acceptBid(
    signature: BytesLike,
    auctionid: BigNumberish,
    bidder: string,
    bid: BigNumberish,
    nftaddress: string,
    tokenid: BigNumberish,
    minbid: BigNumberish,
    startblock: BigNumberish,
    expireblock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
   * @param auctionid unique per address auction identifier chosen by seller
   * @param bid token amount bid
   * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
   * @param expireblock block number at which acceptBid stops working
   * @param minbid minimum bid allowed
   * @param nftaddress contract address of the nft we are transferring
   * @param signature type encoded message signed by the bidder
   * @param startblock block number at which acceptBid starts working
   * @param tokenid token id we are transferring
   */
  "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
    signature: BytesLike,
    auctionid: BigNumberish,
    bidder: string,
    bid: BigNumberish,
    nftaddress: string,
    tokenid: BigNumberish,
    minbid: BigNumberish,
    startblock: BigNumberish,
    expireblock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * invalidates all sender's bids at and under given price
   * @param auctionid unique per address auction identifier chosen by seller
   * @param price token amount to cancel at and under
   */
  cancelBidsUnderPrice(
    auctionid: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * invalidates all sender's bids at and under given price
   * @param auctionid unique per address auction identifier chosen by seller
   * @param price token amount to cancel at and under
   */
  "cancelBidsUnderPrice(uint256,uint256)"(
    auctionid: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recover(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "recover(bytes32,bytes)"(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  toEthSignedMessageHash(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "toEthSignedMessageHash(bytes32)"(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "consumed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    acceptBid(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    cancelBidsUnderPrice(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    "cancelBidsUnderPrice(uint256,uint256)"(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    BidAccepted(
      auctionid: null,
      bidder: string | null,
      seller: string | null,
      amount: null,
      nftaddress: null,
      tokenid: null,
      expireblock: null
    ): EventFilter;

    Cancelled(
      bidder: string | null,
      auctionid: BigNumberish | null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "consumed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    acceptBid(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    cancelBidsUnderPrice(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    "cancelBidsUnderPrice(uint256,uint256)"(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "consumed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    acceptBid(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * recovers bidder's signature based on seller's proposed data and, if bid data hash matches the message hash, transfers nft and payment
     * @param auctionid unique per address auction identifier chosen by seller
     * @param bid token amount bid
     * @param bidder address of who the seller says the bidder is, for confirmation of the recovered bidder
     * @param expireblock block number at which acceptBid stops working
     * @param minbid minimum bid allowed
     * @param nftaddress contract address of the nft we are transferring
     * @param signature type encoded message signed by the bidder
     * @param startblock block number at which acceptBid starts working
     * @param tokenid token id we are transferring
     */
    "acceptBid(bytes,uint256,address,uint256,address,uint256,uint256,uint256,uint256)"(
      signature: BytesLike,
      auctionid: BigNumberish,
      bidder: string,
      bid: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      minbid: BigNumberish,
      startblock: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    cancelBidsUnderPrice(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * invalidates all sender's bids at and under given price
     * @param auctionid unique per address auction identifier chosen by seller
     * @param price token amount to cancel at and under
     */
    "cancelBidsUnderPrice(uint256,uint256)"(
      auctionid: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
