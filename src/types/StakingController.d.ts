/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber, BigNumberish, ethers, EventFilter, PopulatedTransaction, Signer } from "ethers";
import { CallOverrides, Contract, ContractTransaction, Overrides } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";

interface StakingControllerInterface extends ethers.utils.Interface {
  functions: {
    "approveDomainRequest(uint256)": FunctionFragment;
    "calculateDomainId(uint256,string)": FunctionFragment;
    "domainData(uint256)": FunctionFragment;
    "fulfillDomainRequest(uint256,uint256,string,bool)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "placeDomainRequest(uint256,uint256,string,string)": FunctionFragment;
    "requestCount()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveDomainRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDomainId",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillDomainRequest",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeDomainRequest",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveDomainRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domainData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillDomainRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeDomainRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "DomainRequestApproved(uint256)": EventFragment;
    "DomainRequestFulfilled(uint256,string,address,uint256,uint256,uint256)": EventFragment;
    "DomainRequestPlaced(uint256,uint256,uint256,string,string,address,uint256)": EventFragment;
    "RequestWithdrawn(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainRequestApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainRequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainRequestPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawn"): EventFragment;
}

export class StakingController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingControllerInterface;

  functions: {
    approveDomainRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveDomainRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateDomainId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateDomainId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
    >;

    "domainData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
    >;

    fulfillDomainRequest(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fulfillDomainRequest(uint256,uint256,string,bool)"(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    placeDomainRequest(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "placeDomainRequest(uint256,uint256,string,string)"(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        parentId: BigNumber;
        offeredAmount: BigNumber;
        requester: string;
        requestedName: string;
        accepted: boolean;
        domainNonce: BigNumber;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        parentId: BigNumber;
        offeredAmount: BigNumber;
        requester: string;
        requestedName: string;
        accepted: boolean;
        domainNonce: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  approveDomainRequest(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveDomainRequest(uint256)"(
    requestId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateDomainId(
    parentId: BigNumberish,
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateDomainId(uint256,string)"(
    parentId: BigNumberish,
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
  >;

  "domainData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
  >;

  fulfillDomainRequest(
    requestId: BigNumberish,
    royaltyAmount: BigNumberish,
    metadata: string,
    lockOnCreation: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fulfillDomainRequest(uint256,uint256,string,bool)"(
    requestId: BigNumberish,
    royaltyAmount: BigNumberish,
    metadata: string,
    lockOnCreation: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _registrar: string,
    _infinity: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _registrar: string,
    _infinity: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  placeDomainRequest(
    parentId: BigNumberish,
    offeredAmount: BigNumberish,
    name: string,
    requestUri: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "placeDomainRequest(uint256,uint256,string,string)"(
    parentId: BigNumberish,
    offeredAmount: BigNumberish,
    name: string,
    requestUri: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
      parentId: BigNumber;
      offeredAmount: BigNumber;
      requester: string;
      requestedName: string;
      accepted: boolean;
      domainNonce: BigNumber;
    }
  >;

  "requests(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
      parentId: BigNumber;
      offeredAmount: BigNumber;
      requester: string;
      requestedName: string;
      accepted: boolean;
      domainNonce: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    approveDomainRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveDomainRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateDomainId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDomainId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
    >;

    "domainData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nonce: BigNumber; fulfilledRequest: BigNumber }
    >;

    fulfillDomainRequest(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfillDomainRequest(uint256,uint256,string,bool)"(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registrar: string,
      _infinity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _registrar: string,
      _infinity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    placeDomainRequest(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "placeDomainRequest(uint256,uint256,string,string)"(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        parentId: BigNumber;
        offeredAmount: BigNumber;
        requester: string;
        requestedName: string;
        accepted: boolean;
        domainNonce: BigNumber;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        parentId: BigNumber;
        offeredAmount: BigNumber;
        requester: string;
        requestedName: string;
        accepted: boolean;
        domainNonce: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    DomainRequestApproved(requestId: BigNumberish | null): EventFilter;

    DomainRequestFulfilled(
      requestId: BigNumberish | null,
      name: null,
      recipient: null,
      domainId: BigNumberish | null,
      parentID: BigNumberish | null,
      domainNonce: null
    ): EventFilter;

    DomainRequestPlaced(
      parentId: BigNumberish | null,
      requestId: BigNumberish | null,
      offeredAmount: null,
      requestUri: null,
      name: null,
      requestor: null,
      domainNonce: null
    ): EventFilter;

    RequestWithdrawn(requestId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    approveDomainRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveDomainRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateDomainId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDomainId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "domainData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillDomainRequest(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fulfillDomainRequest(uint256,uint256,string,bool)"(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    placeDomainRequest(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "placeDomainRequest(uint256,uint256,string,string)"(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveDomainRequest(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveDomainRequest(uint256)"(
      requestId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateDomainId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateDomainId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "domainData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillDomainRequest(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fulfillDomainRequest(uint256,uint256,string,bool)"(
      requestId: BigNumberish,
      royaltyAmount: BigNumberish,
      metadata: string,
      lockOnCreation: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _registrar: string,
      _infinity: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    placeDomainRequest(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "placeDomainRequest(uint256,uint256,string,string)"(
      parentId: BigNumberish,
      offeredAmount: BigNumberish,
      name: string,
      requestUri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
